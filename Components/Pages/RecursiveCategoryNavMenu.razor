@using System.Text.RegularExpressions

<RadzenPanelMenuItem 
    Text=@NestedMarkdownPosts.Key Icon="folder"
    Style=@GetCategoryMenuItemStyle() >
    @if (_standaloneMarkdownPosts.Any())
    {
        foreach (string standaloneMarkdownPost in _standaloneMarkdownPosts)
        {
            <MarkdownPostMenuItem 
                MarkdownFilePath=@($"{NestedMarkdownPosts.Key}/{standaloneMarkdownPost}")
                IsNestedMenuItem=true 
            />
        }
    }
    @if (_nestedMarkdownPosts.Any())
    {
        foreach (KeyValuePair<string, List<string>> nestedMarkdownPost in _nestedMarkdownPosts)
        {
            <RecursiveCategoryNavMenu 
                NestedMarkdownPosts=@nestedMarkdownPost
                IsNestedCategroyMenuItem=true
            />
        }
    }
</RadzenPanelMenuItem>

@code {
    [Parameter] public required KeyValuePair<string, List<string>> NestedMarkdownPosts { get; set; }
    [Parameter] public bool IsNestedCategroyMenuItem {get;set;} = false;
    private HashSet<string> _standaloneMarkdownPosts = new();
    private Dictionary<string, List<string>> _nestedMarkdownPosts = new();

    protected override void OnParametersSet() => Process();

    private void Process()
    {
        try
        {
            _standaloneMarkdownPosts = NestedMarkdownPosts.Value?
                .Select(path => path.Split('/', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries))
                .Where(segments => segments.Length >= 2 && segments[1].EndsWith(".md", StringComparison.OrdinalIgnoreCase))
                .Select(segments => Path.GetFileNameWithoutExtension(segments[1]))
                .ToHashSet() ?? new HashSet<string>();

            int indexToSplitAt = 0;

            var ds = NestedMarkdownPosts.Value?.Where(path => !_standaloneMarkdownPosts.Contains(Path.GetFileNameWithoutExtension(path))).ToList();
            var trimmed = ds.Select(p => p.Replace($"{NestedMarkdownPosts.Key}/", "")).ToList();

            var gh = trimmed.Where(path => path.Contains('/'))
                .GroupBy(
                    path => path.Split('/')[indexToSplitAt],
                    path => path
                ).ToDictionary(
                    g => g.Key,
                    g => g.ToList()
                );
            _nestedMarkdownPosts = gh;
            
        } catch (Exception) { }
    }

    private string GetCategoryMenuItemStyle()
    {
        string style = "overflow-wrap:anywhere;";
        
        if (IsNestedCategroyMenuItem)
            style += "margin-left:10px;";

        return style;
    }
}