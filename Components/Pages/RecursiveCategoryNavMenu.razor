<RadzenPanelMenuItem Text=@NestedMarkdownPosts.Key Icon="key_visualizer" >
    @if (_standaloneMarkdownPosts.Any())
    {
        foreach (string standaloneMarkdownPost in _standaloneMarkdownPosts)
        {
            <MarkdownPostMenuItem 
                MarkdownFilePath=@($"{NestedMarkdownPosts.Key}/{standaloneMarkdownPost}")
                IsNestedMenuItem=true 
            />
        }
    }
    @if (_nestedMarkdownPosts.Any())
    {
        foreach (KeyValuePair<string, List<string>> nestedMarkdownPost in _nestedMarkdownPosts)
        {
            <RecursiveCategoryNavMenu NestedMarkdownPosts=@nestedMarkdownPost />
        }
    }
</RadzenPanelMenuItem>

@code {
    [Parameter] public required KeyValuePair<string, List<string>> NestedMarkdownPosts { get; set; }
    private HashSet<string> _standaloneMarkdownPosts = new();
    private Dictionary<string, List<string>> _nestedMarkdownPosts = new();

    protected override void OnParametersSet() => Process();

    private void Process()
    {
        try
        {
            _standaloneMarkdownPosts = NestedMarkdownPosts.Value?
                .Select(path => path.Split('/', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries))
                .Where(segments => segments.Length >= 2 && segments[1].EndsWith(".md", StringComparison.OrdinalIgnoreCase))
                .Select(segments => Path.GetFileNameWithoutExtension(segments[1]))
                .ToHashSet() ?? new HashSet<string>();
            
            
            @* var aa = NestedMarkdownPosts.Value?
                .Select(path => path.Split('/'))
                .Where(segments => segments.Length >= 2 && !segments[1].EndsWith(".md"))
                .GroupBy(
                    path => path.Split('/')[1],
                    path => path
                ).ToDictionary(
                    g => g.Key,
                    g => g.ToList()
                );

                foreach(var qq in aa)
                {
                    Console.WriteLine(qq.Key);
                    foreach(string zz in qq.Value)
                    {
                        Console.WriteLine(zz);
                    }
                } *@
            @* _nestedMarkdownPosts = NestedMarkdownPosts.Value!
                .Select(path => path.Split('/', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries))
                .Select(path =>
                {
                    var segments = path.Split('/');
                    return new
                    {
                        Key = segments[1],
                        RemainingPath = string.Join('/', segments.Skip(1))
                    };
                })
                .GroupBy(
                    x => x.Key,
                    x => x.RemainingPath
                )
                .ToDictionary(
                    g => g.Key,
                    g => g.ToList()
                ); *@
        }
        catch (Exception) { }
    }
}